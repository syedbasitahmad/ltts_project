        -:    0:Source:main.c
        -:    0:Graph:main.gcno
        -:    0:Data:main.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/**
        -:    2: * @file main.c
        -:    3: * @author  (basitahmad4@gmail.com)
        -:    4: * @brief One Stop solution for mathematical operations:1.Basic Calculator 2.Bitwise Calculator 3.Complex Calculator 4.BMI calculator 5. Digital storage Converter 6.Temperature Converter 7. Unit Converter
        -:    5: * @version 0.1
        -:    6: * @date 2021-04-12
        -:    7: * 
        -:    8: * @copyright Copyright (c) 2021
        -:    9: * 
        -:   10: */
        -:   11:#include "stdio.h"
        -:   12:#include "header.h"
        -:   13:#define KEY "Enter the calculator Operation you want to do:"
        -:   14:
        4:   15:void yellow_t(){
        4:   16:  printf("\033[1;33m");
        4:   16-block  0
        4:   17:}
        4:   18:error_t one_stop_operations()
        -:   19:{
        -:   20:    //system("cls");  use system function to clear 
        -:   21:    //screen instead of clrscr();
        4:   22:    yellow_t();
        4:   22-block  0
        4:   23:    printf("\t\t\t|------------------------------------------------|\n");
        4:   24:	printf("\t\t|                                                |\n");
        4:   25:	printf("\t\t|       -----------------------------            |\n");
        4:   26:	printf("\t\t|       WELCOME TO ONE STOP SOLUTION             |\n");
        4:   27:	printf("\t\t|       -----------------------------            |\n");
        4:   28:	printf("\t\t|                                                |\n");
        4:   29:	printf("\t\t|                                                |\n");
        4:   30:	printf("\t\t|                                                |\n");
        4:   31:	printf("\t\t|              Miniproject                       |\n");
        4:   32:	printf("\t\t|              SF ID:260756                      |\n");
        4:   33:	printf("\t\t|      CONTACT US:basithmad4@gmail.com           |\n");
        4:   34:	printf("\t\t|------------------------------------------------|\n\n\n");
        -:   35:
        -:   36: 
        4:   37:    printf("******* Press 'Q' or 'q' to quit ");
        4:   38:    printf("the program ********\n");
        4:   39:    printf("***** Press 'H' or 'h' to display ");
        4:   40:    printf("below options *****\n\n");
        4:   41:    printf("Enter 'C' or 'c' to clear the screen and");
        4:   42:    printf(" display available option \n\n");
        -:   43: 
        4:   44:    printf("Enter 'a' symbol for Basic Calculator \n");
        4:   45:    printf("Enter 'b' symbol for Bitwise Calculator \n");
        4:   46:    printf("Enter 'c' symbol for BMI CALCULATOR \n");
        4:   47:    printf("Enter 'd' symbol for Complex Calculator \n");
        4:   48:    printf("Enter 'e' symbol for DIGITAL STORAGE CONVERTER \n");
        4:   49:    printf("Enter 'g' symbol for TEMPERATURE CONVERTER\n");
        4:   50:    printf("Enter 'g' symbol for UNIT CONVERTER \n");
        4:   51:    printf("Enter 'h' for MAIN MENU \n");
        4:   52:    printf("Enter 's' for SYSTEM CLS \n");
        4:   53:    printf("Enter 'q' to quit \n");
        -:   54:   // printf("Enter ! symbol for Factorial \n\n");
        4:   55:    return SUCCESS;
        -:   56:}
    #####:   57:int basic_calc(void) {
        -:   58:	calc1 c1;
        -:   59:    calc2 c2;
        -:   60:    calc3 c3;
        -:   61:    calc4 c4;
        -:   62:    calc5 c5;
        -:   63:    int choice,result1;
        -:   64:    float result;
        -:   65:
        -:   66:do {
    #####:   67:printf("\nMathematical Operations (0 to exit):\n");
    %%%%%:   67-block  0
    #####:   68:printf("\n1. Addition\n2. Subtraction\n3. Multiplication\n4. Division\n");
    #####:   69:printf("5. Square root\n6. X ^ Y\n7. X ^ 2\n8. X ^ 3\n");
    #####:   70:printf("9. 1 / X\n10. X ^ (1 / Y)\n11. X ^ (1 / 3)\n");
    #####:   71:printf("12. 10 ^ X\n13. X!\n14. Percent \n15. log10(x)\n16. Modulus\n");
    #####:   72:printf("17. Sin(X)\n18. Cos(X)\n19. Tan(X)\n20. Cosec(X)\n");
    #####:   73:printf("21. Sec(X)\n22. Cot(X)\n");
    #####:   74:printf("\nEnter the Choice: ");
    #####:   75:scanf("%d", &choice);
        -:   76:
    #####:   77:if(choice == 0) exit(0);
    %%%%%:   77-block  0
    #####:   78:switch(choice) {
    %%%%%:   78-block  0
        -:   79:
    #####:   80:case 1:
    #####:   81:printf("Enter X: ");
    %%%%%:   81-block  0
    #####:   82:scanf("%f", &c1.a);
    #####:   83:printf("\nEnter Y: ");
    #####:   84:scanf("%f", &c1.b);
    #####:   85:result=add(&c1);
    #####:   86:printf("\nResult: %f\n", result);
    #####:   87:break;
        -:   88:
    #####:   89:case 2:
    #####:   90:printf("Enter X: ");
    %%%%%:   90-block  0
    #####:   91:scanf("%f", &c1.a);
    #####:   92:printf("\nEnter Y: ");
    #####:   93:scanf("%f", &c1.b);
    #####:   94:result=sub(&c1);
    #####:   95:printf("\nResult: %f\n", result);
    #####:   96:break;
        -:   97:
    #####:   98:case 3:
    #####:   99:printf("Enter X: ");
    %%%%%:   99-block  0
    #####:  100:scanf("%f", &c1.a);
    #####:  101:printf("\nEnter Y: ");
    #####:  102:scanf("%f", &c1.b);
    #####:  103:result=mul(&c1);
    #####:  104:printf("\nResult: %f\n", result);
    #####:  105:break;
        -:  106:
    #####:  107:case 4:
    #####:  108:printf("Enter X: ");
    %%%%%:  108-block  0
    #####:  109:scanf("%f", &c1.a);
    #####:  110:printf("\nEnter Y: ");
    #####:  111:scanf("%f", &c1.b);
    #####:  112:result=divi(&c1);
    #####:  113:printf("\nResult: %f\n", result);
    #####:  114:break;
        -:  115:
    #####:  116:case 5:
    #####:  117:printf("Enter X: ");
    %%%%%:  117-block  0
    #####:  118:scanf("%f", &c5.i);
    #####:  119:result=square_r(&c5);
    #####:  120:printf("\nResult: %f\n", result);
    #####:  121:break;
        -:  122:
    #####:  123:case 6:
    #####:  124:printf("Enter X: ");
    %%%%%:  124-block  0
    #####:  125:scanf("%f", &c1.a);
    #####:  126:printf("\nEnter Y: ");
    #####:  127:scanf("%f", &c1.b);
    #####:  128:result=power(&c1);
    #####:  129:printf("\nResult: %f\n", result);
    #####:  130:break;
        -:  131:
    #####:  132:case 7:
    #####:  133:printf("Enter X: ");
    %%%%%:  133-block  0
    #####:  134:scanf("%f", &c3.e);
    #####:  135:c3.f=2;
    #####:  136:result=power_2(&c3);
    #####:  137:printf("\nResult: %f\n", result);
    #####:  138:break;
        -:  139:
    #####:  140:case 8:
    #####:  141:printf("Enter X: ");
    %%%%%:  141-block  0
    #####:  142:scanf("%f", &c3.e);
    #####:  143:c3.f=3;
    #####:  144:result=power_3(&c3);
    #####:  145:printf("\nResult: %f\n", result);
    #####:  146:break;
        -:  147:
    #####:  148:case 9:
    #####:  149:printf("Enter X: ");
    %%%%%:  149-block  0
    #####:  150:scanf("%f", &c3.e);
    #####:  151:c3.f=-1;
    #####:  152:result=power_neg(&c3);
    #####:  153:printf("\nResult: %f\n", result);
    #####:  154:break;
        -:  155:
    #####:  156:case 10:
    #####:  157:printf("Enter X: ");
    %%%%%:  157-block  0
    #####:  158:scanf("%f", &c1.a);
    #####:  159:printf("\nEnter Y: ");
    #####:  160:scanf("%f", &c1.b);
    #####:  161:result=power_y(&c1);
    #####:  162:printf("\nResult: %f\n", result);
    #####:  163:break;
        -:  164:
    #####:  165:case 11:
    #####:  166:printf("Enter X: ");
    %%%%%:  166-block  0
    #####:  167:scanf("%f", &c1.a);
    #####:  168:c1.b=3;
    #####:  169:result=power_one_divideby_3(&c1);
    #####:  170:printf("\nResult: %f\n", result);
    #####:  171:break;
        -:  172:
    #####:  173:case 12:
    #####:  174:c4.g=10;
    #####:  175:printf("Enter X: ");
    %%%%%:  175-block  0
    #####:  176:scanf("%f", &c4.h);
    #####:  177:result=power_to_10(&c4);
    #####:  178:printf("\nResult: %f\n", result);
    #####:  179:break;
        -:  180:
    #####:  181:case 13:
    #####:  182:printf("Enter X: ");
    %%%%%:  182-block  0
    #####:  183:scanf("%f", &c5.i);
    #####:  184:result=fact(&c5);
    #####:  185:printf("\nResult: %.f\n", result);
    #####:  186:break;
        -:  187:
    #####:  188:case 14:
    #####:  189:printf("Enter X: ");
    %%%%%:  189-block  0
    #####:  190:scanf("%f", &c1.a);
    #####:  191:printf("\nEnter Y: ");
    #####:  192:scanf("%f", &c1.b);
    #####:  193:result=percent(&c1);
    #####:  194:printf("\nResult: %.2f\n", result);
    #####:  195:break;
        -:  196:
    #####:  197:case 15:
    #####:  198:printf("Enter X: ");
    %%%%%:  198-block  0
    #####:  199:scanf("%f", &c5.i);
    #####:  200:result=log_10(&c5);
    #####:  201:printf("\nResult: %.2f\n", result);
    #####:  202:break;
        -:  203:
    #####:  204:case 16:
    #####:  205:printf("Enter X: ");
    %%%%%:  205-block  0
    #####:  206:scanf("%d", &c2.c);
    #####:  207:printf("\nEnter Y: ");
    #####:  208:scanf("%d", &c2.d);
    #####:  209:result1=modu(&c2);
    #####:  210:printf("\nResult: %d\n", result1);
    #####:  211:break;
        -:  212:
    #####:  213:case 17:
    #####:  214:printf("Enter X: ");
    %%%%%:  214-block  0
    #####:  215:scanf("%f", &c5.i);
    #####:  216:result=sin_v(&c5);
    #####:  217:printf("\nResult: %.2f\n", result);
    #####:  218:break;
        -:  219:
    #####:  220:case 18:
    #####:  221:printf("Enter X: ");
    %%%%%:  221-block  0
    #####:  222:scanf("%f", &c5.i);
    #####:  223:result=cos_v(&c5);
    #####:  224:printf("\nResult: %.2f\n", result);
    #####:  225:break;
        -:  226:
    #####:  227:case 19:
    #####:  228:printf("Enter X: ");
    %%%%%:  228-block  0
    #####:  229:scanf("%f", &c5.i);
    #####:  230:result=tan_v(&c5);
    #####:  231:printf("\nResult: %.2f\n", result);
    #####:  232:break;
        -:  233:
    #####:  234:case 20:
    #####:  235:printf("Enter X: ");
    %%%%%:  235-block  0
    #####:  236:scanf("%f", &c5.i);
    #####:  237:result=sin_inv(&c5);
    #####:  238:printf("\nResult: %.2f\n", result);
    #####:  239:break;
        -:  240:
    #####:  241:case 21:
    #####:  242:printf("Enter X: ");
    %%%%%:  242-block  0
    #####:  243:scanf("%f", &c5.i);
    #####:  244:result=cos_inv(&c5);
    #####:  245:printf("\nResult: %.2f\n", result);
    #####:  246:break;
        -:  247:
    #####:  248:case 22:
    #####:  249:printf("Enter X: ");
    %%%%%:  249-block  0
    #####:  250:scanf("%f", &c5.i);
    #####:  251:result=tan_inv(&c5);
    #####:  252:printf("\nResult: %.2f\n", result);
    #####:  253:break;
        -:  254:
    #####:  255:default:
    #####:  256:printf("\nInvalid Choice!\n");
    %%%%%:  256-block  0
        -:  257:}
    #####:  258:} while(choice);
    %%%%%:  258-block  0
    #####:  259:return 0;
    %%%%%:  259-block  0
        -:  260:}
        1:  261:int main(){
        1:  262:    complex_t a = {1, 1}, b = {3, 1}, c = {0, 0};
        1:  263:    body_mass bmi_index= {0,0,0};
        1:  264:    int X=1;
        -:  265:    char one_stop_oprn;
        -:  266: 
        -:  267:    // Function call 
        1:  268:    one_stop_operations();
        1:  268-block  0
        -:  269: 
        6:  270:    while(X)
        6:  270-block  0
        -:  271:    {
        6:  272:        printf("\n");
        6:  272-block  0
        6:  273:        printf("%s : ", KEY);
        -:  274: 
        6:  275:        scanf("%c",&one_stop_oprn);
        -:  276: 
        6:  277:        switch(one_stop_oprn)
        -:  278:        {
    #####:  279:            case 'a': basic_calc();;
    %%%%%:  279-block  0
    #####:  280:                      break;
        -:  281: 
        1:  282:            case 'b': bitwise_operations();
        1:  282-block  0
        1:  283:                      break;
        -:  284: 
        1:  285:            case 'c': bmi_calculator(bmi_index);
        1:  285-block  0
        1:  286:                      break;
        -:  287: 
        1:  288:            case 'd': complex_calc();
        1:  288-block  0
    #####:  289:                      break;
        -:  290: 
    #####:  291:            case 'e': digital_storage_converter();
    %%%%%:  291-block  0
    #####:  292:                      break;
        -:  293: 
    #####:  294:            case 'f': temperature();
    %%%%%:  294-block  0
    #####:  295:                      break;
        -:  296: 
    #####:  297:            case 'g': unit_converter();
    %%%%%:  297-block  0
    #####:  298:                      break;
        -:  299: 
    #####:  300:            case 'H':
    #####:  301:            case 'h': one_stop_operations();
    %%%%%:  301-block  0
    #####:  302:                      break;
        -:  303: 
    #####:  304:            case 'Q':
    #####:  305:            case 'q': exit(0);
    %%%%%:  305-block  0
        -:  306:                      break;
    #####:  307:            case 's':
    #####:  308:            case 'S': system("cls");
    %%%%%:  308-block  0
    #####:  309:                      one_stop_operations();
    #####:  310:                      break;
        -:  311: 
        3:  312:            default : system("cls");
        3:  312-block  0
        -:  313: 
        3:  314:    printf("\n**********You have entered unavailable option");
        3:  315:    printf("***********\n");
        3:  316:    printf("\n*****Please Enter any one of below available ");
        3:  317:    printf("options****\n");
        3:  318:                      one_stop_operations();
        -:  319:        }
        -:  320:    }
        -:  321:
        -:  322:    //bmi_calculator(bmi_index);
        -:  323:   // area_converter();
        -:  324:   // unit_converter();
        -:  325:   // temperature();
        -:  326:    //digital_storage_converter();
        -:  327:    //bitwise_operations();
        -:  328:    //basic_calc();
        -:  329:  //  complex_calc();
        -:  330:  //  complex_sum(&a, &b, &c);
        -:  331:    //printf("%f %f\n\n", c.real, c.imaginary);
        -:  332:    
        -:  333:   // c.real = 0.0;
        -:  334:   // c.imaginary = 0.0;
        -:  335:   // complexSub(&a, &b, &c);
        -:  336:    //printf("%f %f\n\n", c.real, c.imaginary);
        -:  337:    
        -:  338:   // c.real = 0.0;
        -:  339:  //  c.imaginary = 0.0;
        -:  340:   // complexMul(&a, &b, &c);
        -:  341:    //printf("%f %f\n\n", c.real, c.imaginary);
        -:  342:
        -:  343:    //c.real = 0.0;
        -:  344:    //c.imaginary = 0.0;
        -:  345:   // complexDiv(&a, &b, &c);
        -:  346:    //printf("%f %f\n\n", c.real, c.imaginary);
    #####:  347:    return 0;
    %%%%%:  347-block  0
        -:  348:}
